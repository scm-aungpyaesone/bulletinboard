# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-fpm
      - image: circleci/mysql:latest
        command: [--default-authentication-plugin=mysql_native_password]
        environment:
          MYSQL_ROOT_PASSWORD: rootPass
          MYSQL_USER: user # need to be same with "DB_USERNAME" of .env
          MYSQL_PASSWORD: password # need to be same with "DB_PASSWORD" of .env
          MYSQL_DATABASE: test_bulletinboard # need to be same with "DB_DATABASE" of .env
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    working_directory: ~/bulletinboard/Bulletin

    steps:
      - checkout:
          path: ~/bulletinboard
      - run: sudo apt update && sudo apt install -y \
                libfreetype6-dev \
                libjpeg62-turbo-dev \
                libpng-dev \
      - run: sudo docker-php-ext-install pdo pdo_mysql
      - run: sudo docker-php-ext-configure gd --with-freetype --with-jpeg
      - run: sudo docker-php-ext-install -j$(nproc) gd
      
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # prepare the database
      - run:
          name: "Create Environment file and generate app key"
          command: |
            mv .env.testing .env
            php artisan key:generate

      - run:
          name: "Create database and run migration"
          command: |
            php artisan migrate

      # run tests with phpunit
      - run:
          name: "Run Tests"
          command: ./vendor/bin/phpunit
